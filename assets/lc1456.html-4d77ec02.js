import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,a as e}from"./app-56d79145.js";const p={},t=e(`<h1 id="_1456-定长子串中元音的最大数目" tabindex="-1"><a class="header-anchor" href="#_1456-定长子串中元音的最大数目" aria-hidden="true">#</a> 1456. 定长子串中元音的最大数目</h1><h2 id="score-1263" tabindex="-1"><a class="header-anchor" href="#score-1263" aria-hidden="true">#</a> score：1263</h2><h3 id="题目" tabindex="-1"><a class="header-anchor" href="#题目" aria-hidden="true">#</a> 题目</h3><ul><li><p>给你字符串 <code>s</code> 和整数 <code>k</code> 。</p></li><li><p>请返回字符串 <code>s</code> 中长度为 <code>k</code> 的单个子字符串中可能包含的最大元音字母数。</p></li><li><p>英文中的 <code>元音字母</code> 为<code>（a, e, i, o, u）</code>。</p></li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h3><h4 id="示例1" tabindex="-1"><a class="header-anchor" href="#示例1" aria-hidden="true">#</a> 示例1</h4><pre><code>输入：s = &quot;abciiidef&quot;, k = 3   
输出：3
解释：子字符串 &quot;iii&quot; 包含 3 个元音字母。
</code></pre><h4 id="示例2" tabindex="-1"><a class="header-anchor" href="#示例2" aria-hidden="true">#</a> 示例2</h4><pre><code>输入：s = &quot;aeiou&quot;, k = 2
输出：2
解释：任意长度为 2 的子字符串都包含 2 个元音字母。
</code></pre><h3 id="解析" tabindex="-1"><a class="header-anchor" href="#解析" aria-hidden="true">#</a> 解析</h3><ul><li>最简单的滑动窗口问题，分为两个时期，一个是窗口扩大到最大值的过程，以及窗口开始滑动时的过程</li><li>第一个时期，扩大到窗口最大值的过程可以看作简单的对数组的遍历过程 <code>count = count + (isOl(chs[i]) ? 1 : 0);</code></li><li>第二个时期，开始滑动，只需要考虑两端的变化，首端消去尾端加入，做个判断 <code>count = count - (isOl(chs[i - k]) ? 1 : 0);</code></li></ul><h3 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxVowels</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chs <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&gt;=</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                count <span class="token operator">=</span> count <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token function">isOl</span><span class="token punctuation">(</span>chs<span class="token punctuation">[</span>i <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> 
            count <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">isOl</span><span class="token punctuation">(</span>chs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            res <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isOl</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> ch <span class="token operator">==</span> <span class="token char">&#39;a&#39;</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token char">&#39;e&#39;</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token char">&#39;i&#39;</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token char">&#39;o&#39;</span> <span class="token operator">||</span> ch <span class="token operator">==</span> <span class="token char">&#39;u&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13),o=[t];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","lc1456.html.vue"]]);export{k as default};
