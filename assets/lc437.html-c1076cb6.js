import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as p,c as o,b as n,d as s,e as c,a as i}from"./app-e02a9984.js";const l={},u=n("h1",{id:"_437-路径总和-iii",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_437-路径总和-iii","aria-hidden":"true"},"#"),s(" 437. 路径总和 III")],-1),r={href:"https://leetcode.cn/problems/path-sum-iii/",target:"_blank",rel:"noopener noreferrer"},d=i(`<p>给定一个二叉树的根节点 <code>root</code>, 和一个整数 <code>targetSum</code>, 求该二叉树里节点值之和等于 <code>targetSum</code> 的 <strong>路径</strong> 的数目。</p><p><strong>路径</strong> 不需要从根节点开始, 也不需要在叶子节点结束, 但是路径方向必须是向下的（只能从父节点到子节点）。</p><p>示例 1：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8
输出：3
解释：和等于 8 的路径有 3 条，如图所示。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入：root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
输出：3
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h2><p>使用 <strong>前缀和</strong> 的思想减少重复计算, 该解法时间复杂度为O(N)。</p><ol><li>使用一个 <code>prefixCounter</code> 的 <code>Map</code> 来记录 <strong>从根节点到当前节点路径上</strong> <strong>各前缀和值的数量</strong>。</li><li><code>prefixCounter[curSum - targetSum]</code> 的值就是 <strong>从根节点出发到当前节点的路径上</strong> 有多少个符合的 <strong>起点节点</strong>。(结束节点就是当前节点)</li></ol><blockquote><p><code>prefixCounter</code> 中统计的是每个时刻当前从根节点到当前节点的前缀和, 因此移动当前节点的时候需要注意维护该状态。</p><p><code>prefixCounter</code> 的 key 使用了 <code>Long</code>, 防止溢出, 注意数据范围。</p></blockquote><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Definition for a binary tree node.
 * public class TreeNode <span class="token punctuation">{</span>
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() <span class="token punctuation">{</span><span class="token punctuation">}</span>
 *     TreeNode(int val) <span class="token punctuation">{</span> this.val = val; <span class="token punctuation">}</span>
 *     TreeNode(int val, TreeNode left, TreeNode right) <span class="token punctuation">{</span>
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     <span class="token punctuation">}</span>
 * <span class="token punctuation">}</span>
 */</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>

    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> prefixCounter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// use long to avoid overflow</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pathSum</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        prefixCounter<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0L</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment">// put init prefixSum for 0L                      </span>
        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> targetSum<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// start from root</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> targetSum<span class="token punctuation">,</span> <span class="token keyword">long</span> prefixSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> curSum <span class="token operator">=</span> prefixSum <span class="token operator">+</span> root<span class="token punctuation">.</span>val<span class="token punctuation">;</span>              <span class="token comment">// get prefixSum to current Node (included)</span>
        <span class="token keyword">var</span> res <span class="token operator">=</span> prefixCounter                         <span class="token comment">// res = prefixCounter[curSum - targetSum]</span>
            <span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>curSum <span class="token operator">-</span> targetSum<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       
        
        prefixCounter                                   <span class="token comment">// prefixCounter[curSum]++</span>
            <span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>curSum<span class="token punctuation">,</span> prefixCounter<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>curSum<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        res <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">,</span> targetSum<span class="token punctuation">,</span> curSum<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// work with left child</span>
        res <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">,</span> targetSum<span class="token punctuation">,</span> curSum<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// work with right child</span>
        
        prefixCounter                                   <span class="token comment">// prefixCounter[curSum]--</span>
            <span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>curSum<span class="token punctuation">,</span> prefixCounter<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>curSum<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12);function k(m,v){const a=t("ExternalLinkIcon");return p(),o("div",null,[u,n("p",null,[n("a",r,[s("https://leetcode.cn/problems/path-sum-iii/"),c(a)])]),d])}const g=e(l,[["render",k],["__file","lc437.html.vue"]]);export{g as default};
