import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as p,c as o,b as n,d as s,e as c,a as r}from"./app-003d0ad3.js";const l={},i=n("h1",{id:"_739-每日温度",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_739-每日温度","aria-hidden":"true"},"#"),s(" 739. 每日温度")],-1),u={href:"https://leetcode.cn/problems/daily-temperatures",target:"_blank",rel:"noopener noreferrer"},d=r(`<p><code>给定一个整数数组 temperatures</code>, 表示每天的温度, <code>返回一个数组 answer</code>, 其中 <code>answer[i]</code> 是指对于第 <code>i</code> 天, 下一个更高温度出现在几天后。如果气温在这之后都不会升高, 请在该位置用 <code>0</code> 来代替。</p><p>示例 1:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: temperatures = [73,74,75,71,69,72,76,73]
输出: [1,1,4,2,1,1,0,0]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 2:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: temperatures = [30,40,50,60]
输出: [1,1,1,0]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例 3:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>输入: temperatures = [30,60,90]
输出: [1,1,0]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="思路" tabindex="-1"><a class="header-anchor" href="#思路" aria-hidden="true">#</a> 思路</h2><p>这题是非常典型的 <strong>单调栈</strong>。</p><p>维护一个 <strong>栈</strong>, 其中保存元素的 <strong>下标</strong>, 我们要保证这个 <strong>栈</strong> 中下标对应的元素是 <strong>递减</strong> 的。这样在遍历的时候, 我们先去看 <strong>栈顶元素</strong> 对应的 <strong>值</strong>, 如果比当前值小, 那么这个栈中元素就是左侧最近的, 比当前元素小的值的下标, 我们就可以计算出相应的 <code>res[i]</code>。</p><blockquote><p>时间复杂度 O(N), 空间复杂度 O(N)。</p></blockquote><h2 id="代码" tabindex="-1"><a class="header-anchor" href="#代码" aria-hidden="true">#</a> 代码</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">dailyTemperatures</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temperatures<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> sTop <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                                                   <span class="token comment">// stack top pointer</span>
        <span class="token keyword">var</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>temperatures<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>                       <span class="token comment">// stack for indexes (NOT value)</span>
        <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>temperatures<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> temperatures<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> curV <span class="token operator">=</span> temperatures<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>sTop <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> curV <span class="token operator">&gt;</span> temperatures<span class="token punctuation">[</span>stack<span class="token punctuation">[</span>sTop <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// not empty &amp;&amp; curV &gt; stackTopV</span>
                <span class="token keyword">int</span> prevIdx <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">--</span>sTop<span class="token punctuation">]</span><span class="token punctuation">;</span>                            <span class="token comment">// pop stack</span>
                res<span class="token punctuation">[</span>prevIdx<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> prevIdx<span class="token punctuation">;</span>                             <span class="token comment">// set result</span>
            <span class="token punctuation">}</span>
            stack<span class="token punctuation">[</span>sTop<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>                                          <span class="token comment">// push stack</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function k(m,v){const a=t("ExternalLinkIcon");return p(),o("div",null,[i,n("p",null,[n("a",u,[s("https://leetcode.cn/problems/daily-temperatures"),c(a)])]),d])}const h=e(l,[["render",k],["__file","lc739.html.vue"]]);export{h as default};
